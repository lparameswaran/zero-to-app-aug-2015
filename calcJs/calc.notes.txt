1. calcJs1.html
   * Add reference to javascript file js/calc1.js
   * In the body tag, add reference to onload="initialize()"
   - calc1.js:
     * Obtains the HTML element identified by id="result" and changes that to "0"
     * You will notice that 12345678 on the display is changed to 0
   Cons:
     * Digits do not function 

2. calcJs2.html/calc2.js
   * initialize() calls updateDisplay()
   * Added a function called updateDisplay() to display the current result
   Cons:
     * Digits do not function 

3. calcJs3.html/calc3.js
   * Add digit function that accepts d (digit pressed) as a argument
   * Add onclick="digit('7')" when digit 7 is pressed etc to the corresponding button tag
   * Digits start appearing on the display
   Cons:
     * No visual indication to the user that other buttons are disabled

4. calcJs4.html
   * Add disabled="disabled" to all the non working buttons
   Cons:
     * Digits are not being appended - 1 digit replaces another

5. calcJs5.html/calc5.js
   * Digits are appended
 
6. calcJs6.html/calc6.js
   * C button is enabled
   * C button calls clr() function
   Cons:
     * When display is 0, display still continues to append

7. calcJs7.html/calc7.js
   * Introduced if/else to ensure display is updated correctly in digit function
   Cons:
     * No restriction on number of digits -- user can continue typing as many digits as he wants

8. calcJs8.html/calc8.js
   * Enforce maximum number of digits in updateDisplay function
   * Display ERROR when number of digits exceeds
   Cons:
     * Even when error is present on the screen, user can continue typing digits

9. calcJs9.html/calc9.js
   * Introduce a boolean variable called error, which all functions except clr checks
   * First time true/false boolean values are used
   * First time return command is used
   Cons:
     * No addition

10. calcJs10.html/calc10.js
   * Introduce a variable for previous result called prevNumber
   * Introduce a variable for current result called result
   * Introduce a variable for previous Operation called prevOperation
   * Introduce add() function
   * Introduce library function called parseInt
   * Enable + operation & call add function
   Cons:
     * DOES NOT DISPLAY RESULT!!! Why? *Bonus Points for those who answer what we should do*

11. calcJs11.html/calc11.js
   * Enable = operation & call equals function
   * Introduce console.log() for debugging
   Cons:
     * Oh Oh, once result is present, next numbers are getting appended

12. calcJs12.html/calc12.js
   * Introduce a autoClear flag which is used when the next digit is pressed
   * Remove console.log() -- this is production code, we do not debug in production
   Cons:
     * There is a bug... display is misbehaving after a autoClear -- why?

13. calcJs13.html/calc13.js
   * clear the autoClear flag
   Cons:
     * WHAT happens if user presses 2 + 3 + 4 = ?

14. calcJs14.html/calc14.js
   * Fix add() logic to handle 2 + 3 + 4 ....
   Cons:
     * No subtraction

15. calcJs15.html/calc15.js
   * Introduce sub() function
   * Enable - operation
   Question:
     * Shouldn't a 8 digit calculator allow +/- 8 digits?
   Cons:
     * No negative 8 digit number support

16. calcJs16.html/calc16.js
   * Allow for negative 8 digit numbers
   Cons:
     * There is still a problem --- Can anyone guess what it is, we have to fix?

17. calcJs17.html/calc17.js
   * Fixes the problem mentioned in #16 above
   Cons:
     * No multiplication/division; but calculator is functional.
       Please test it out AND find out *if* there are bugs still.


QUESTIONS:
  * Why did we not do multiplication? What is the complication involved with it?
  * What problems are likely to arise when we do division?

    *******************************************************
    ***** TIME TO DEPLOY TO THE DEVICE OF YOUR CHOICE *****
    *******************************************************
